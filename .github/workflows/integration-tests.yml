name: STS Integration Tests

on:
  # Run on pushes to main/master that modify key files
  push:
    branches: [ main, master ]
    paths:
      - 'source/**'
      - 'test/**'
      - 'requirements.txt'
      - '.github/workflows/**'
  
  # Run on PRs
  pull_request:
    branches: [ main, master ]
    paths:
      - 'source/**'
      - 'test/**'
      - 'requirements.txt'
      - '.github/workflows/**'
  
  # Weekly comprehensive test
  schedule:
    - cron: '0 6 * * 1'  # Monday 6 AM UTC

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install linting tools
      run: |
        pip install flake8 black isort
        
    - name: Check code formatting
      run: |
        black --check --diff source/ test/
        
    - name: Check import sorting
      run: |
        isort --check-only --diff source/ test/
        
    - name: Lint with flake8
      run: |
        flake8 source/ test/ --max-line-length=88 --extend-ignore=E203,W503

  smoke-tests:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    strategy:
      matrix:
        model: [SAT, SMT]  # Quick models for smoke testing
        team_count: [2, 4]
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run smoke test
      timeout-minutes: 5
      run: |
        cd test
        python run_all_models.py \
          --models ${{ matrix.model }} \
          --n-values ${{ matrix.team_count }} \
          --mode generate \
          --timeout 60 \
          --verbose
          
    - name: Validate results
      run: |
        cd test
        if [ -f "solution_checker.py" ]; then
          echo "Running solution validation..."
          python solution_checker.py --model ${{ matrix.model }} --n ${{ matrix.team_count }}
        fi

  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[full-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
        # Install MiniZinc for CP model
        wget -q https://github.com/MiniZinc/MiniZincIDE/releases/download/2.7.5/MiniZincIDE-2.7.5-bundle-linux-x86_64.tgz
        tar -xzf MiniZincIDE-2.7.5-bundle-linux-x86_64.tgz
        sudo mv MiniZincIDE-2.7.5-bundle-linux-x86_64 /opt/minizinc
        echo "/opt/minizinc/bin" >> $GITHUB_PATH
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run comprehensive tests
      timeout-minutes: 60
      run: |
        cd test
        python run_all_models.py \
          --models CP MIP SAT SMT \
          --n-values 2 4 6 8 \
          --mode generate \
          --timeout 300 \
          --verbose \
          --output comprehensive_results.json
          
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results
        path: |
          test/comprehensive_results.json
          res/
        retention-days: 14
        
    - name: Generate test report
      if: always()
      run: |
        cd test
        echo "# Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "comprehensive_results.json" ]; then
          echo "✅ Comprehensive test completed" >> $GITHUB_STEP_SUMMARY
          echo "Results file generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Comprehensive test failed - no results file generated" >> $GITHUB_STEP_SUMMARY
        fi
